├── Geometric-Algorithms/
│   ├── README.md  # Describes what geometric algorithms are and lists each algorithm in the directory.
│   ├── Range Sort/
│   │   ├── README.md  # Details about range sort
│   │   └── range_sort.py # Implementation of range sort.
│   └── Angular Sort/
│       ├── README.md  # Details about angular sort
│       └── angular_sort.py  # Implementation of angular sort.


# Geometric Algorithms (Hypothetical Implementations)
def range_sort(arr):
    # Simple range-based sorting (hypothetical)
    return sorted(arr)


def angular_sort(points, origin=None):
    if origin is None:
        origin = (0, 0)
    origin_x, origin_y = origin
    
    def sort_key(point):
        # Calculate angle from the origin
        return math.atan2(point[1] - origin_y, point[0] - origin_x)
    
    points.sort(key=sort_key)
    return points

# Example usage:
points = [(1, 1), (1, 2), (0, 1), (-1, 1), (-1, -1), (1, -1)]
sorted_points = angular_sort(points.copy(), origin=(0, 0))
print("Points sorted by angle from origin:", sorted_points)


def range_sort(points, dimension='x'):
    if dimension == 'x':
        points.sort(key=lambda point: point[0])
    elif dimension == 'y':
        points.sort(key=lambda point: point[1])
    return points

# Example usage:
points = [(1, 2), (3, 3), (5, 1), (4, 5), (2, 4)]
sorted_by_x = range_sort(points.copy(), dimension='x')
sorted_by_y = range_sort(points.copy(), dimension='y')

print("Points sorted by x-coordinate:", sorted_by_x)
print("Points sorted by y-coordinate:", sorted_by_y)
