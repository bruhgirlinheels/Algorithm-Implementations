├── Dynamic-Algorithms/ 
│   ├── README.md   # Describes what dynamic algorithms are and lists each algorithm in the directory.
│   ├── Insertion Sort/ 
│   │   ├── README.md  # Details about insertion sort
│   │   └── insertion_sort.py  # Implementation of insertion sort.
│   └── Bubble Sort/
│       ├── README.md   # Details about bubble sort
│       └── bubble_sort.py  # Implementation of bubble sort.

# Dynamic Algorithms (Using Insertion Sort)
def dynamic_algorithm_using_insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


# Dynamic Algorithms (Using Cost Calculation)
def min_cost_insertion_sort(arr, cost):
    n = len(arr)
    # dp[i] will store the minimum cost to sort subarray arr[0...i]
    dp = [0] * n
    dp[0] = cost[0]  # Initial cost to place the first element

    for i in range(1, n):
        min_cost = float('inf')
        for j in range(i, -1, -1):
            if j > 0:
                # Sort subarray using insertion sort concept and calculate cost
                dp[i] = min(dp[i], dp[j-1] + cost[j])
            else:
                dp[i] = min(dp[i], cost[j])
            # Perform the insertion sort logic to maintain sorted order
            key = arr[i]
            while j < i and arr[j] > key:
                arr[j + 1] = arr[j]
                j += 1
            arr[j] = key
    return dp[-1]

# Example usage
arr = [4, 3, 2, 10]
cost = [20, 5, 10, 1]  # Hypothetical costs
print("Minimum cost to sort the array:", min_cost_insertion_sort(arr.copy(), cost))

 # Dynamic Algorithms (Using Bubble Sort, Swap_Cost) 
def min_swap_bubble_sort(arr, swap_cost):
    n = len(arr)
    dp = [0] * n
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                dp[i] += swap_cost[j]  # Add cost of swapping j and j+1
    return sum(dp)

# Example usage
arr = [64, 34, 25, 12]
swap_cost = [2, 3, 1, 4]  # Hypothetical costs for each possible swap position
print("Minimum swap cost to sort the array:", min_swap_bubble_sort(arr.copy(), swap_cost))
