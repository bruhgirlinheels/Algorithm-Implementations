├── Sorting-Algorithms/
│   ├── README.md  # Describes what sorting algorithms are and lists each algorithm in the directory.
│   ├── Merge Sort/
│   │   ├── README.md  # Details about merge sort, including complexity and use cases.
│   │   └── merge_sort.py  # Implementation of merge sort.
│   ├── Quick Sort/
│   │   ├── README.md  # Details about quick sort
│   │   └── quick_sort.py   # Implementation of quick sort.
│   └── Bubble Sort/
│       ├── README.md  # Details about bubble sort
│       └── bubble_sort.py  # Implementation of bubble sort.


# Sorting Algorithms
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr.pop()
    greater = [x for x in arr if x > pivot]
    lesser = [x for x in arr if x <= pivot]
    return quick_sort(lesser) + [pivot] + quick_sort(greater)

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
    return arr
