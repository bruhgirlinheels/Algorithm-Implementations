├── Greedy-Algorithms/
│   ├── README.md  # Describes what greedy algorithms are and lists each algorithm in the directory.
│   ├── Selection Sort/
│   │   ├── README.mdb # Details about selection sort
│   │   └── selection_sort.py  # Implementation of selection sort.
│   └── Ratio-Based Sorting/
│       ├── README.md  # Details about ratio-based sort
│       └── ratio-based_sorting.py  # Implementation of ratio-based sort.



# Greedy Algorithms (Hypothetical Implementation Using Selection Sort)
#Selection Sort Hypothetical 

def greedy_algorithm_using_selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    # Hypothetical greedy operation: sum first three smallest elements
    return sum(arr[:3])


# Greedy Algorithms (Selection Sort Example Implementation)
#Selection Sort

def greedy_selection_sort(items):
    n = len(items)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if items[min_idx][1] > items[j][1]:  # Assuming item structure is (item, weight)
                min_idx = j
        items[i], items[min_idx] = items[min_idx], items[i]
    return items

# Example usage
items = [('item1', 12), ('item2', 5), ('item3', 20), ('item4', 2)]
sorted_items = greedy_selection_sort(items)
print("Items sorted by weight:", sorted_items)



# Greedy Algorithms (Ratio-Based Sorting Example Implementation)
# Ratio-Based Sorting

def fractional_knapsack(value, weight, capacity):
    # Create a list of (index, value, weight, ratio)
    index = list(range(len(value)))
    ratio = [v/w for v, w in zip(value, weight)]
    # Sort by value-to-weight ratio in descending order
    index.sort(key=lambda i: ratio[i], reverse=True)
    
    max_value = 0
    for i in index:
        if weight[i] <= capacity:
            max_value += value[i]
            capacity -= weight[i]
        else:
            max_value += value[i] * (capacity / weight[i])
            break
    return max_value

# Example usage
value = [60, 100, 120]  # Value of items
weight = [10, 20, 30]  # Weight of items
capacity = 50  # Max weight capacity
max_val = fractional_knapsack(value, weight, capacity)
print("Maximum value in the knapsack =", max_val)
