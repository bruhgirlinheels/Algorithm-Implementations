#Example Merge Sort
#Merge Sort 

def merge_sort(arr):
    """
    Sorts an array using the merge sort algorithm.

    Parameters:
    arr (list): The array to sort.

    Returns:
    list: The sorted array.
    """
    if len(arr) > 1:
        mid = len(arr) // 2  # Finding the mid point of the array
        left_half = arr[:mid]  # Dividing the elements into two halves
        right_half = arr[mid:]

        merge_sort(left_half)  # Recursive call on the left half
        merge_sort(right_half)  # Recursive call on the right half

        i = j = k = 0  # Initialize pointers for left, right, and main array

        # Merge the sorted halves
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        # Checking if any element was left
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

    return arr

# Example usage:
sample_array = [38, 27, 43, 3, 9, 82, 10]
sorted_array = merge_sort(sample_array)
print("Sorted array:", sorted_array)


