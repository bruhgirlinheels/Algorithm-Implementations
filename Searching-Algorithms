├── Searching-Algorithms/
│   ├── README.md   # Describes what searching algorithms are and lists each algorithm in the directory.
│   ├── Binary Search/
│   │   ├── README.md   # Details about binary search
│   │   └── binary_search.py  # Implementation of binary search.
│   └── Linear Search/
│       ├── README.md   # Details about linear sort
│       └── linear_search.py  # Implementation of linear sort.



# Searching Algorithms (Hypothetical Implementation Using Binary Search) 
def linear_search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1

def binary_search(arr, x):
    l, r = 0, len(arr) - 1
    while l <= r:
        mid = l + (r - l) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            l = mid + 1
        else:
            r = mid - 1
    return -1



# Searching Algorithms (Example Implementation Using Binary Search) 
# Binary Search 

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        guess = arr[mid]
        if guess == target:
            return mid
        if guess > target:
            high = mid - 1
        else:
            low = mid + 1
    return -1

# Example usage:
sorted_data = [3, 5, 6, 10, 45]
target = 6
print("Binary Search: Target found at index", binary_search(sorted_data, target))




# Searching Algorithms (Example Implementation Using Linear Search) 
# Linear Search 

def linear_search(arr, target):
    for index, value in enumerate(arr):
        if value == target:
            return index
    return -1

# Example usage:
data = [5, 3, 10, 45, 6]
target = 10
print("Linear Search: Target found at index", linear_search(data, target))
